---
name: CI

'on':
  workflow_dispatch:
  push:
    branches:
      - "ci-*"
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

concurrency:
  # https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ ! ( startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' ) }}

permissions: {}

jobs:
  ci:
    name: ci
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: clippy, rustfmt
      - name: Cache cargo files and outputs
        if: startsWith(runner.environment,'github-hosted')
        uses: Swatinem/rust-cache@v2
      - name: caching (nightly)
        if: startsWith(runner.environment,'self-hosted')
        # Don't use rust-cache.
        # Rust-cache disables a key feature of actions/cache: restoreKeys.
        # Without restore keys, we lose the ability to get partial matches on caches, and end
        # up with too many cache misses.
        # Use a "small" suffix to use the build caches where possible, but build caches won't use this
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/registry/CACHEDIR.TAG
            ~/.cargo/git
            target
          key: tari-${{ runner.os }}-${{ runner.cpu-model }}-${{ env.nightly_toolchain }}-nightly-${{ hashFiles('**/Cargo.lock') }}-small
          restore-keys: |
            tari-${{ runner.os }}-${{ runner.cpu-model }}-${{ env.nightly_toolchain }}-nightly-${{ hashFiles('**/Cargo.lock') }}-small
            tari-${{ runner.os }}-${{ runner.cpu-model }}-${{ env.nightly_toolchain }}-nightly-${{ hashFiles('**/Cargo.lock') }}
            tari-${{ runner.os }}-${{ runner.cpu-model }}-${{ env.nightly_toolchain }}-nightly
      - name: cargo format
        run: cargo +nightly fmt --all -- --check
      - name: Install cargo-lints
        run: cargo install cargo-lints
      - name: Clippy check (with lints)
        run: cargo +nightly lints clippy --all-targets --all-features
      - name: cargo machete
        run: |
          cargo install cargo-machete@0.7.0
          cargo machete
      - name: cargo vet
        run: |
          cargo install cargo-vet@0.10.0 --locked
          cargo vet
